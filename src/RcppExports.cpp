// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// eigval_sym
arma::vec eigval_sym(arma::mat M);
RcppExport SEXP _spectralGraphTopology_eigval_sym(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(eigval_sym(M));
    return rcpp_result_gen;
END_RCPP
}
// eigvec_sym
arma::mat eigvec_sym(arma::mat M);
RcppExport SEXP _spectralGraphTopology_eigvec_sym(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(eigvec_sym(M));
    return rcpp_result_gen;
END_RCPP
}
// inv_sympd
arma::mat inv_sympd(arma::mat M);
RcppExport SEXP _spectralGraphTopology_inv_sympd(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_sympd(M));
    return rcpp_result_gen;
END_RCPP
}
// pinv
arma::mat pinv(arma::mat M);
RcppExport SEXP _spectralGraphTopology_pinv(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(pinv(M));
    return rcpp_result_gen;
END_RCPP
}
// L
Eigen::MatrixXd L(const Eigen::VectorXd& w);
RcppExport SEXP _spectralGraphTopology_L(SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(L(w));
    return rcpp_result_gen;
END_RCPP
}
// A
Eigen::MatrixXd A(const Eigen::VectorXd& w);
RcppExport SEXP _spectralGraphTopology_A(SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(A(w));
    return rcpp_result_gen;
END_RCPP
}
// Mmat
Eigen::MatrixXd Mmat(const int n);
RcppExport SEXP _spectralGraphTopology_Mmat(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(Mmat(n));
    return rcpp_result_gen;
END_RCPP
}
// Pmat
Eigen::MatrixXd Pmat(const int n);
RcppExport SEXP _spectralGraphTopology_Pmat(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(Pmat(n));
    return rcpp_result_gen;
END_RCPP
}
// vecLmat
Eigen::MatrixXd vecLmat(const int n);
RcppExport SEXP _spectralGraphTopology_vecLmat(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(vecLmat(n));
    return rcpp_result_gen;
END_RCPP
}
// vec
Eigen::MatrixXd vec(const Eigen::MatrixXd& M);
RcppExport SEXP _spectralGraphTopology_vec(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(vec(M));
    return rcpp_result_gen;
END_RCPP
}
// Lstar
Eigen::VectorXd Lstar(const Eigen::MatrixXd& M);
RcppExport SEXP _spectralGraphTopology_Lstar(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(Lstar(M));
    return rcpp_result_gen;
END_RCPP
}
// Astar
Eigen::VectorXd Astar(const Eigen::MatrixXd& M);
RcppExport SEXP _spectralGraphTopology_Astar(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(Astar(M));
    return rcpp_result_gen;
END_RCPP
}
// Linv
Eigen::VectorXd Linv(const Eigen::MatrixXd& M);
RcppExport SEXP _spectralGraphTopology_Linv(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(Linv(M));
    return rcpp_result_gen;
END_RCPP
}
// Ainv
Eigen::VectorXd Ainv(const Eigen::MatrixXd& M);
RcppExport SEXP _spectralGraphTopology_Ainv(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(Ainv(M));
    return rcpp_result_gen;
END_RCPP
}
// D
Eigen::VectorXd D(const Eigen::VectorXd& w);
RcppExport SEXP _spectralGraphTopology_D(SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(D(w));
    return rcpp_result_gen;
END_RCPP
}
// Dstar
Eigen::VectorXd Dstar(const Eigen::VectorXd& w);
RcppExport SEXP _spectralGraphTopology_Dstar(SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(Dstar(w));
    return rcpp_result_gen;
END_RCPP
}
// Dmat
Eigen::MatrixXd Dmat(const int n);
RcppExport SEXP _spectralGraphTopology_Dmat(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(Dmat(n));
    return rcpp_result_gen;
END_RCPP
}
// blockDiagCpp
Eigen::MatrixXd blockDiagCpp(const std::vector<Eigen::MatrixXd>& matrices);
RcppExport SEXP _spectralGraphTopology_blockDiagCpp(SEXP matricesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type matrices(matricesSEXP);
    rcpp_result_gen = Rcpp::wrap(blockDiagCpp(matrices));
    return rcpp_result_gen;
END_RCPP
}
// metrics
std::vector<double> metrics(const Eigen::MatrixXd& Wtrue, const Eigen::MatrixXd& West, const double eps);
RcppExport SEXP _spectralGraphTopology_metrics(SEXP WtrueSEXP, SEXP WestSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Wtrue(WtrueSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type West(WestSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(metrics(Wtrue, West, eps));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_matrix_rownorm2
Eigen::MatrixXd pairwise_matrix_rownorm2(const Eigen::MatrixXd& M);
RcppExport SEXP _spectralGraphTopology_pairwise_matrix_rownorm2(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_matrix_rownorm2(M));
    return rcpp_result_gen;
END_RCPP
}
// upper_view_vec
Eigen::VectorXd upper_view_vec(const Eigen::MatrixXd& M);
RcppExport SEXP _spectralGraphTopology_upper_view_vec(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(upper_view_vec(M));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spectralGraphTopology_eigval_sym", (DL_FUNC) &_spectralGraphTopology_eigval_sym, 1},
    {"_spectralGraphTopology_eigvec_sym", (DL_FUNC) &_spectralGraphTopology_eigvec_sym, 1},
    {"_spectralGraphTopology_inv_sympd", (DL_FUNC) &_spectralGraphTopology_inv_sympd, 1},
    {"_spectralGraphTopology_pinv", (DL_FUNC) &_spectralGraphTopology_pinv, 1},
    {"_spectralGraphTopology_L", (DL_FUNC) &_spectralGraphTopology_L, 1},
    {"_spectralGraphTopology_A", (DL_FUNC) &_spectralGraphTopology_A, 1},
    {"_spectralGraphTopology_Mmat", (DL_FUNC) &_spectralGraphTopology_Mmat, 1},
    {"_spectralGraphTopology_Pmat", (DL_FUNC) &_spectralGraphTopology_Pmat, 1},
    {"_spectralGraphTopology_vecLmat", (DL_FUNC) &_spectralGraphTopology_vecLmat, 1},
    {"_spectralGraphTopology_vec", (DL_FUNC) &_spectralGraphTopology_vec, 1},
    {"_spectralGraphTopology_Lstar", (DL_FUNC) &_spectralGraphTopology_Lstar, 1},
    {"_spectralGraphTopology_Astar", (DL_FUNC) &_spectralGraphTopology_Astar, 1},
    {"_spectralGraphTopology_Linv", (DL_FUNC) &_spectralGraphTopology_Linv, 1},
    {"_spectralGraphTopology_Ainv", (DL_FUNC) &_spectralGraphTopology_Ainv, 1},
    {"_spectralGraphTopology_D", (DL_FUNC) &_spectralGraphTopology_D, 1},
    {"_spectralGraphTopology_Dstar", (DL_FUNC) &_spectralGraphTopology_Dstar, 1},
    {"_spectralGraphTopology_Dmat", (DL_FUNC) &_spectralGraphTopology_Dmat, 1},
    {"_spectralGraphTopology_blockDiagCpp", (DL_FUNC) &_spectralGraphTopology_blockDiagCpp, 1},
    {"_spectralGraphTopology_metrics", (DL_FUNC) &_spectralGraphTopology_metrics, 3},
    {"_spectralGraphTopology_pairwise_matrix_rownorm2", (DL_FUNC) &_spectralGraphTopology_pairwise_matrix_rownorm2, 1},
    {"_spectralGraphTopology_upper_view_vec", (DL_FUNC) &_spectralGraphTopology_upper_view_vec, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_spectralGraphTopology(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
